// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package com.igeekinc.indelible.indeliblefs.security;

public final class EntityAuthenticationServerImpl_Stub
    extends java.rmi.server.RemoteStub
    implements com.igeekinc.indelible.indeliblefs.security.EntityAuthenticationServer, java.rmi.Remote
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.security.EntityAuthentication authenticateServer(com.igeekinc.indelible.oid.EntityID, byte[])"),
	new java.rmi.server.Operation("byte entityAuthenticationServerChallenge(byte[])[]"),
	new java.rmi.server.Operation("com.igeekinc.indelible.oid.EntityID getEntityID()"),
	new java.rmi.server.Operation("java.security.cert.Certificate getServerCertificate()"),
	new java.rmi.server.Operation("void registerServer(java.security.cert.X509Certificate)")
    };
    
    private static final long interfaceHash = -6396992102962435133L;
    
    // constructors
    public EntityAuthenticationServerImpl_Stub() {
	super();
    }
    public EntityAuthenticationServerImpl_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of authenticateServer(EntityID, byte[])
    public com.igeekinc.indelible.indeliblefs.security.EntityAuthentication authenticateServer(com.igeekinc.indelible.oid.EntityID $param_EntityID_1, byte[] $param_arrayOf_byte_2)
	throws java.io.IOException, java.lang.IllegalStateException, java.rmi.RemoteException, java.security.InvalidKeyException, java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException, java.security.SignatureException, java.security.UnrecoverableKeyException, java.security.cert.CertificateEncodingException, java.security.cert.CertificateParsingException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 0, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_EntityID_1);
		out.writeObject($param_arrayOf_byte_2);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.security.EntityAuthentication $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.security.EntityAuthentication) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.security.InvalidKeyException e) {
	    throw e;
	} catch (java.security.KeyStoreException e) {
	    throw e;
	} catch (java.security.NoSuchAlgorithmException e) {
	    throw e;
	} catch (java.security.NoSuchProviderException e) {
	    throw e;
	} catch (java.security.SignatureException e) {
	    throw e;
	} catch (java.security.UnrecoverableKeyException e) {
	    throw e;
	} catch (java.security.cert.CertificateEncodingException e) {
	    throw e;
	} catch (java.security.cert.CertificateParsingException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of entityAuthenticationServerChallenge(byte[])
    public byte[] entityAuthenticationServerChallenge(byte[] $param_arrayOf_byte_1)
	throws java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 1, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_arrayOf_byte_1);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    byte[] $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (byte[]) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getEntityID()
    public com.igeekinc.indelible.oid.EntityID getEntityID()
	throws java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 2, interfaceHash);
	    ref.invoke(call);
	    com.igeekinc.indelible.oid.EntityID $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.oid.EntityID) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getServerCertificate()
    public java.security.cert.Certificate getServerCertificate()
	throws java.rmi.RemoteException, java.security.KeyStoreException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 3, interfaceHash);
	    ref.invoke(call);
	    java.security.cert.Certificate $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (java.security.cert.Certificate) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.security.KeyStoreException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of registerServer(X509Certificate)
    public void registerServer(java.security.cert.X509Certificate $param_X509Certificate_1)
	throws java.rmi.RemoteException, java.security.InvalidKeyException, java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException, java.security.SignatureException, java.security.cert.CertificateException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 4, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_X509Certificate_1);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    ref.done(call);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.security.InvalidKeyException e) {
	    throw e;
	} catch (java.security.KeyStoreException e) {
	    throw e;
	} catch (java.security.NoSuchAlgorithmException e) {
	    throw e;
	} catch (java.security.NoSuchProviderException e) {
	    throw e;
	} catch (java.security.SignatureException e) {
	    throw e;
	} catch (java.security.cert.CertificateException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
