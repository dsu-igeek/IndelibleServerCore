// Skeleton class generated by rmic, do not edit.
// Contents subject to change without notice.

package com.igeekinc.indelible.indeliblefs.security;

public final class EntityAuthenticationServerImpl_Skel
    implements java.rmi.server.Skeleton
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.security.EntityAuthentication authenticateServer(com.igeekinc.indelible.oid.EntityID, byte[])"),
	new java.rmi.server.Operation("byte entityAuthenticationServerChallenge(byte[])[]"),
	new java.rmi.server.Operation("com.igeekinc.indelible.oid.EntityID getEntityID()"),
	new java.rmi.server.Operation("java.security.cert.Certificate getServerCertificate()"),
	new java.rmi.server.Operation("void registerServer(java.security.cert.X509Certificate)")
    };
    
    private static final long interfaceHash = -6396992102962435133L;
    
    public java.rmi.server.Operation[] getOperations() {
	return (java.rmi.server.Operation[]) operations.clone();
    }
    
    public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash)
	throws java.lang.Exception
    {
	if (hash != interfaceHash)
	    throw new java.rmi.server.SkeletonMismatchException("interface hash mismatch");
	
	com.igeekinc.indelible.indeliblefs.security.EntityAuthenticationServerImpl server = (com.igeekinc.indelible.indeliblefs.security.EntityAuthenticationServerImpl) obj;
	switch (opnum) {
	case 0: // authenticateServer(EntityID, byte[])
	{
	    com.igeekinc.indelible.oid.EntityID $param_EntityID_1;
	    byte[] $param_arrayOf_byte_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_EntityID_1 = (com.igeekinc.indelible.oid.EntityID) in.readObject();
		$param_arrayOf_byte_2 = (byte[]) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.indelible.indeliblefs.security.EntityAuthentication $result = server.authenticateServer($param_EntityID_1, $param_arrayOf_byte_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 1: // entityAuthenticationServerChallenge(byte[])
	{
	    byte[] $param_arrayOf_byte_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_arrayOf_byte_1 = (byte[]) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    byte[] $result = server.entityAuthenticationServerChallenge($param_arrayOf_byte_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 2: // getEntityID()
	{
	    call.releaseInputStream();
	    com.igeekinc.indelible.oid.EntityID $result = server.getEntityID();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 3: // getServerCertificate()
	{
	    call.releaseInputStream();
	    java.security.cert.Certificate $result = server.getServerCertificate();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 4: // registerServer(X509Certificate)
	{
	    java.security.cert.X509Certificate $param_X509Certificate_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_X509Certificate_1 = (java.security.cert.X509Certificate) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.registerServer($param_X509Certificate_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	default:
	    throw new java.rmi.UnmarshalException("invalid method number");
	}
    }
}
